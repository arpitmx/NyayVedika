package com.ncs.nyayvedika.UI.Chat.BottomSheets

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.widget.LinearLayoutCompat
import androidx.core.app.ActivityCompat
import androidx.fragment.app.viewModels
import com.gkemon.XMLtoPDF.PdfGenerator
import com.gkemon.XMLtoPDF.PdfGeneratorListener
import com.gkemon.XMLtoPDF.model.FailureResponse
import com.gkemon.XMLtoPDF.model.SuccessResponse
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import com.ncs.nyayvedika.R
import com.ncs.nyayvedika.databinding.OptionsbottomsheetBinding


/*
File : OptionsBottomSheet.kt -> com.ncs.nyayvedika.UI.Chat.BottomSheets
Description : BottomSheet for options 

Author : Alok Ranjan (VC uname : apple)
Link : https://github.com/arpitmx
From : Bitpolarity x Noshbae (@Project : NyayVedika Android)

Creation : 3:16 am on 17/09/23

Todo >
Tasks CLEAN CODE : 
Tasks BUG FIXES : 
Tasks FEATURE MUST HAVE : 
Tasks FUTURE ADDITION : 


*//*
File : OptionsBottomSheet.kt -> com.ncs.nyayvedika.UI.Chat.BottomSheets
Description : BottomSheet for options 

Author : Alok Ranjan (VC uname : apple)
Link : https://github.com/arpitmx
From : Bitpolarity (@Project : NyayVedika Android)

Creation : 3:16 am on 17/09/23

Todo >
Tasks CLEAN CODE : 
Tasks BUG FIXES : 
Tasks FEATURE MUST HAVE : 
Tasks FUTURE ADDITION : 


*/
class OptionsBottomSheet constructor(val msg:com.ncs.o2.Domain.Models.Message) : BottomSheetDialogFragment() {

    private val viewModel : OptionsBottomSheetViewModel by viewModels()
    lateinit var binding: OptionsbottomsheetBinding
    private val TAG = "OptionsBottomSheet"
    private lateinit var layout: LinearLayoutCompat
    private lateinit var msgText : TextView
    private lateinit var root : View

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        root = inflater.inflate(R.layout.pdflayout,container,false)
        binding = OptionsbottomsheetBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)




        layout = root.findViewById<LinearLayoutCompat>(R.id.pdfLinLayout)
        msgText = layout.findViewById<TextView>(R.id.text_message)
        msgText.text = msg.message


        setUpViews()
        }

    private fun setUpViews() {
            setUpOnclickListners()
    }

    private fun setUpOnclickListners() {
        binding.btnSendPdf.setOnClickListener{
            generatePdf(msg)
        }
    }


    private fun generatePdf(msg:com.ncs.o2.Domain.Models.Message) {

        PdfGenerator.getBuilder()
            .setContext(requireActivity())
            .fromViewSource()
            .fromView(layout) /* "fromLayoutXML()" takes array of layout resources.
                 * You can also invoke "fromLayoutXMLList()" method here which takes list of layout resources instead of array. */
            /* It takes default page size like A4,A5. You can also set custom page size in pixel
                 * by calling ".setCustomPageSize(int widthInPX, int heightInPX)" here. */
            .setFileName("exportedVedika") /* It is file name */
            .setFolderNameOrPath("Vedika/") /* It is folder name. If you set the folder name like this pattern (FolderA/FolderB/FolderC), then
                 * FolderA creates first.Then FolderB inside FolderB and also FolderC inside the FolderB and finally
                 * the pdf file named "Test-PDF.pdf" will be store inside the FolderB. */
            .actionAfterPDFGeneration(PdfGenerator.ActionAfterPDFGeneration.OPEN) /* It true then the generated pdf will be shown after generated. */
            .build(object : PdfGeneratorListener() {
                override fun onFailure(failureResponse: FailureResponse) {
                    super.onFailure(failureResponse)
                    Log.d(TAG, "onFailure: " + failureResponse.errorMessage)
                    /* If pdf is not generated by an error then you will findout the reason behind it
                         * from this FailureResponse. */
                    //Toast.makeText(MainActivity.this, "Failure : "+failureResponse.getErrorMessage(), Toast.LENGTH_SHORT).show();
                    //Toast.makeText(activity, "" + failureResponse.errorMessage, Toast.LENGTH_SHORT)

                }

                override fun showLog(log: String) {
                    super.showLog(log)
                    Log.d(TAG, "log: $log")
                    /*It shows logs of events inside the pdf generation process*/
                }

                override fun onStartPDFGeneration() {}
                override fun onFinishPDFGeneration() {}
                override fun onSuccess(response: SuccessResponse) {
                    super.onSuccess(response)
                    /* If PDF is generated successfully then you will find SuccessResponse
                         * which holds the PdfDocument,File and path (where generated pdf is stored)*/
                    //Toast.makeText(activity, "Success", Toast.LENGTH_SHORT).show();
                    Log.d(TAG, "Success: " + response.path)
                }
            })

        this.dismiss()
    }


}




